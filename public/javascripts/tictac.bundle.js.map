{"version":3,"sources":["webpack:///./jsx/tictac.jsx"],"names":["calculateWinner","squares","lines","i","length","a","b","c","Square","value","onClick","Board","props","renderSquare","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","current","setState","concat","step","winner","status","moves","map","board","desc","jumpTo","handleClick","document","getElementById"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;AAGA,KAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,OAAD,EAAa;AACjC,SAAMC,QAAQ,CACV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADU,EAEV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFU,EAGV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHU,EAIV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJU,EAKV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALU,EAMV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANU,EAOV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPU,EAQV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARU,CAAd;AAUA,UAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAAME,MAA1B,EAAkCD,GAAlC,EAAuC;AAAA,uCACjBD,MAAMC,CAAN,CADiB;AAAA,aAC5BE,CAD4B;AAAA,aACzBC,CADyB;AAAA,aACtBC,CADsB;;AAEnC,aAAIN,QAAQI,CAAR,KAAcJ,QAAQI,CAAR,MAAeJ,QAAQK,CAAR,CAA7B,IAA2CL,QAAQI,CAAR,MAAeJ,QAAQM,CAAR,CAA9D,EAA0E;AACtE,oBAAON,QAAQI,CAAR,CAAP;AACH;AACJ;AACD,YAAO,IAAP;AACH,EAlBD;;AAoBA,KAAMG,SAAS,SAATA,MAAS,OAAsB;AAAA,SAApBC,KAAoB,QAApBA,KAAoB;AAAA,SAAbC,QAAa,QAAbA,OAAa;;AACjC,YACI;AAAA;AAAA,WAAQ,WAAU,QAAlB,EAA2B,SAAS;AAAA,wBAAMA,UAAN;AAAA,cAApC;AACKD;AADL,MADJ;AAKH,EAND;;KAQME,K;;;;;;;;;;;sCACWR,C,EAAG;AAAA;;AACZ,oBAAO,8BAAC,MAAD,IAAQ,OAAO,KAAKS,KAAL,CAAWX,OAAX,CAAmBE,CAAnB,CAAf,EAAsC,SAAS;AAAA,4BAAM,OAAKS,KAAL,CAAWF,OAAX,CAAmBP,CAAnB,CAAN;AAAA,kBAA/C,GAAP;AACH;;;kCACQ;AACL,oBACI;AAAA;AAAA;AACI;AAAA;AAAA,uBAAK,WAAU,WAAf;AACK,0BAAKU,YAAL,CAAkB,CAAlB,CADL;AAEK,0BAAKA,YAAL,CAAkB,CAAlB,CAFL;AAGK,0BAAKA,YAAL,CAAkB,CAAlB;AAHL,kBADJ;AAMI;AAAA;AAAA,uBAAK,WAAU,WAAf;AACK,0BAAKA,YAAL,CAAkB,CAAlB,CADL;AAEK,0BAAKA,YAAL,CAAkB,CAAlB,CAFL;AAGK,0BAAKA,YAAL,CAAkB,CAAlB;AAHL,kBANJ;AAWI;AAAA;AAAA,uBAAK,WAAU,WAAf;AACK,0BAAKA,YAAL,CAAkB,CAAlB,CADL;AAEK,0BAAKA,YAAL,CAAkB,CAAlB,CAFL;AAGK,0BAAKA,YAAL,CAAkB,CAAlB;AAHL;AAXJ,cADJ;AAmBH;;;;GAxBe,gBAAMC,S;;KA2BpBC,I;;;AACF,qBAAc;AAAA;;AAAA;;AAEV,gBAAKC,KAAL,GAAa;AACTC,sBAAS,CAAC;AACNhB,0BAASiB,MAAM,CAAN,EAASC,IAAT,CAAc,IAAd;AADH,cAAD,CADA;AAITC,sBAAS,IAJA;AAKTC,yBAAY;AALH,UAAb;AAFU;AASb;;;;qCACWlB,C,EAAG;AACX,iBAAMc,UAAU,KAAKD,KAAL,CAAWC,OAAX,CAAmBK,KAAnB,CAAyB,CAAzB,EAA4B,KAAKN,KAAL,CAAWK,UAAX,GAAwB,CAApD,CAAhB;AACA,iBAAME,UAAUN,QAAQA,QAAQb,MAAR,GAAiB,CAAzB,CAAhB;AACA,iBAAMH,UAAUsB,QAAQtB,OAAR,CAAgBqB,KAAhB,EAAhB;AACA,iBAAItB,gBAAgBC,OAAhB,KAA4BA,QAAQE,CAAR,CAAhC,EAA4C;AACxC;AACH;AACDF,qBAAQE,CAAR,IAAa,KAAKa,KAAL,CAAWI,OAAX,GAAqB,GAArB,GAA2B,GAAxC;AACA,kBAAKI,QAAL,CAAc;AACVP,0BAASA,QAAQQ,MAAR,CAAe,CAAC;AACrBxB,8BAASA;AADY,kBAAD,CAAf,CADC;AAIVmB,0BAAS,CAAC,KAAKJ,KAAL,CAAWI,OAJX;AAKVC,6BAAYJ,QAAQb;AALV,cAAd;AAOH;;;gCACMsB,I,EAAM;AACT,kBAAKF,QAAL,CAAc;AACVH,6BAAYK,IADF;AAEVN,0BAAU,EAAEM,OAAO,CAAT;AAFA,cAAd;AAIH;;;kCACQ;AAAA;;AACL,iBAAMT,UAAU,KAAKD,KAAL,CAAWC,OAA3B;AACA,iBAAMM,UAAUN,QAAQ,KAAKD,KAAL,CAAWK,UAAnB,CAAhB;AACA,iBAAMM,SAAS3B,gBAAgBuB,QAAQtB,OAAxB,CAAf;;AAEA,iBAAI2B,4BAA0B,KAAKZ,KAAL,CAAWI,OAAX,GAAqB,GAArB,GAA2B,GAArD,CAAJ;AACA,iBAAIO,MAAJ,EAAY;AACRC,uCAAoBD,MAApB;AACH;AACD,iBAAME,QAAQZ,QAAQa,GAAR,CAAY,UAACC,KAAD,EAAQL,IAAR,EAAiB;AACvC,qBAAMM,OAAON,OAAO,WAAWA,IAAlB,GAAyB,YAAtC;AACA,wBACI;AAAA;AAAA,uBAAI,KAAKA,IAAT;AACI;AAAA;AAAA,2BAAG,WAAU,MAAb,EAAoB,SAAS;AAAA,wCAAM,OAAKO,MAAL,CAAYP,IAAZ,CAAN;AAAA,8BAA7B;AAAuDM;AAAvD;AADJ,kBADJ;AAKH,cAPa,CAAd;AAQA,oBACI;AAAA;AAAA,mBAAK,WAAU,MAAf;AACI;AAAA;AAAA,uBAAK,WAAU,QAAf;AAAyBJ;AAAzB,kBADJ;AAEI;AAAA;AAAA,uBAAK,WAAU,YAAf;AACI,mDAAC,KAAD;AACI,kCAASL,QAAQtB,OADrB;AAEI,kCAAS,iBAACE,CAAD;AAAA,oCAAO,OAAK+B,WAAL,CAAiB/B,CAAjB,CAAP;AAAA;AAFb;AADJ,kBAFJ;AAQI;AAAA;AAAA,uBAAK,WAAU,OAAf;AACI;AAAA;AAAA;AAAK0B;AAAL;AADJ;AARJ,cADJ;AAcH;;;;GAhEc,gBAAMf,S;;AAmEzB,uBAAO,8BAAC,IAAD,OAAP,EAAiBqB,SAASC,cAAT,CAAwB,MAAxB,CAAjB,E","file":"tictac.bundle.js","sourcesContent":["import React from 'react';\nimport {render} from 'react-dom';\n\n\nconst calculateWinner = (squares) => {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n};\n\nconst Square = ({value, onClick}) => {\n    return (\n        <button className=\"square\" onClick={() => onClick()}>\n            {value}\n        </button>\n    );\n};\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)}/>;\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            xIsNext: true,\n            stepNumber: 0\n        }\n    }\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        });\n    }\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (!(step % 2))\n        });\n    }\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        let status = `Next Player: ${(this.state.xIsNext ? 'X' : 'O')}`;\n        if (winner) {\n            status = `Winner: ${winner}!!!`\n        }\n        const moves = history.map((board, step) => {\n            const desc = step ? 'Move #' + step : 'Game start';\n            return (\n                <li key={step}>\n                    <a className=\"step\" onClick={() => this.jumpTo(step)}>{desc}</a>\n                </li>\n            )\n        });\n        return (\n            <div className=\"game\">\n                <div className=\"status\">{status}</div>\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"moves\">\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nrender(<Game />, document.getElementById('root'));\n\n\n// WEBPACK FOOTER //\n// ./jsx/tictac.jsx"],"sourceRoot":""}